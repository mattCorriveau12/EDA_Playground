$date
	Sat Apr 20 17:33:51 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module mux8_tb $end
$var wire 8 ! out [7:0] $end
$var reg 1 " clk $end
$var reg 8 # data0 [7:0] $end
$var reg 8 $ data1 [7:0] $end
$var reg 8 % data2 [7:0] $end
$var reg 8 & data3 [7:0] $end
$var reg 8 ' data4 [7:0] $end
$var reg 8 ( data5 [7:0] $end
$var reg 8 ) data6 [7:0] $end
$var reg 8 * data7 [7:0] $end
$var reg 3 + sel [2:0] $end
$scope module dut $end
$var wire 8 , data0 [7:0] $end
$var wire 8 - data1 [7:0] $end
$var wire 8 . data2 [7:0] $end
$var wire 8 / data3 [7:0] $end
$var wire 8 0 data4 [7:0] $end
$var wire 8 1 data5 [7:0] $end
$var wire 8 2 data6 [7:0] $end
$var wire 8 3 data7 [7:0] $end
$var wire 3 4 sel [2:0] $end
$var reg 8 5 out [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10000001 5
b1 4
b10010 3
b1100101 2
b10001101 1
b1101 0
b1100011 /
b1001 .
b10000001 -
b100100 ,
b1 +
b10010 *
b1100101 )
b10001101 (
b1101 '
b1100011 &
b1001 %
b10000001 $
b100100 #
0"
b10000001 !
$end
#5
1"
#10
0"
#15
1"
#20
b111101 5
b111101 !
0"
b10 +
b10 4
b11000101 *
b11000101 3
b11000110 )
b11000110 2
b11111001 (
b11111001 1
b10001100 '
b10001100 0
b11101101 &
b11101101 /
b111101 %
b111101 .
b1110110 $
b1110110 -
b1101 #
b1101 ,
#25
1"
#30
0"
#35
1"
#40
b11110010 5
b11110010 !
0"
b100 +
b100 4
b11101000 )
b11101000 2
b11001110 (
b11001110 1
b11110010 '
b11110010 0
b10001111 &
b10001111 /
b10010 %
b10010 .
b1110111 $
b1110111 -
b11100101 #
b11100101 ,
#45
1"
#50
0"
#55
1"
#60
b10000000 5
b10000000 !
0"
b101 +
b101 4
b10101010 *
b10101010 3
b100000 )
b100000 2
b10000000 (
b10000000 1
b1010 '
b1010 0
b1100011 &
b1100011 /
b1100101 %
b1100101 .
b101101 $
b101101 -
b10111101 #
b10111101 ,
#65
1"
#70
0"
#75
1"
#80
b11010101 5
b11010101 !
0"
b10101110 *
b10101110 3
b10 )
b10 2
b11010101 (
b11010101 1
b1101011 '
b1101011 0
b1010011 &
b1010011 /
b1101 %
b1101 .
b10011 $
b10011 -
b10010110 #
b10010110 ,
#85
1"
#90
0"
#95
1"
#100
b11001111 5
b11001111 !
0"
b0 +
b0 4
b1000001 *
b1000001 3
b10001010 )
b10001010 2
b11110010 (
b11110010 1
b111100 '
b111100 0
b11001010 &
b11001010 /
b1010 %
b1010 .
b100011 $
b100011 -
b11001111 #
b11001111 ,
#105
1"
#110
0"
#115
1"
#120
b10110110 5
b10110110 !
0"
b11 +
b11 4
b101010 *
b101010 3
b10111100 )
b10111100 2
b10101110 (
b10101110 1
b11000110 '
b11000110 0
b10110110 &
b10110110 /
b11101011 %
b11101011 .
b10001001 $
b10001001 -
b1111000 #
b1111000 ,
#125
1"
#130
0"
#135
1"
#140
b10000101 5
b10000101 !
0"
b1 +
b1 4
b11110001 *
b11110001 3
b10101 )
b10101 2
b1111110 (
b1111110 1
b111010 '
b111010 0
b111011 &
b111011 /
b1001111 %
b1001111 .
b10000101 $
b10000101 -
b1110001 #
b1110001 ,
#145
1"
#150
0"
#155
1"
#160
b10001111 5
b10001111 !
0"
b11 +
b11 4
b1011100 *
b1011100 3
b10011111 )
b10011111 2
b10110111 (
b10110111 1
b11111000 '
b11111000 0
b10001111 &
b10001111 /
b10011111 %
b10011111 .
b1001100 $
b1001100 -
b1100010 #
b1100010 ,
#165
1"
#170
0"
#175
1"
#180
b10001001 5
b10001001 !
0"
b0 +
b0 4
b11000010 *
b11000010 3
b1100 )
b1100 2
b10010110 (
b10010110 1
b1010001 '
b1010001 0
b11010111 &
b11010111 /
b11010000 %
b11010000 .
b1001001 $
b1001001 -
b10001001 #
b10001001 ,
#185
1"
#190
0"
#195
1"
#200
0"
